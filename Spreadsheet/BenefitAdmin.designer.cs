#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spreadsheet
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="spreadsheet1")]
	public partial class BenefitAdminDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertSVCTypeDesc(SVCTypeDesc instance);
    partial void UpdateSVCTypeDesc(SVCTypeDesc instance);
    partial void DeleteSVCTypeDesc(SVCTypeDesc instance);
    partial void InsertActivityCost(ActivityCost instance);
    partial void UpdateActivityCost(ActivityCost instance);
    partial void DeleteActivityCost(ActivityCost instance);
    partial void InsertAnnotation(Annotation instance);
    partial void UpdateAnnotation(Annotation instance);
    partial void DeleteAnnotation(Annotation instance);
    partial void InsertCondition(Condition instance);
    partial void UpdateCondition(Condition instance);
    partial void DeleteCondition(Condition instance);
    partial void InsertConditionActivity(ConditionActivity instance);
    partial void UpdateConditionActivity(ConditionActivity instance);
    partial void DeleteConditionActivity(ConditionActivity instance);
    partial void InsertConditionService(ConditionService instance);
    partial void UpdateConditionService(ConditionService instance);
    partial void DeleteConditionService(ConditionService instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertMinistry(Ministry instance);
    partial void UpdateMinistry(Ministry instance);
    partial void DeleteMinistry(Ministry instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertProvider(Provider instance);
    partial void UpdateProvider(Provider instance);
    partial void DeleteProvider(Provider instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceChildTypeMapping(ServiceChildTypeMapping instance);
    partial void UpdateServiceChildTypeMapping(ServiceChildTypeMapping instance);
    partial void DeleteServiceChildTypeMapping(ServiceChildTypeMapping instance);
    partial void InsertSubActivity(SubActivity instance);
    partial void UpdateSubActivity(SubActivity instance);
    partial void DeleteSubActivity(SubActivity instance);
    partial void InsertSVCObjectiveDesc(SVCObjectiveDesc instance);
    partial void UpdateSVCObjectiveDesc(SVCObjectiveDesc instance);
    partial void DeleteSVCObjectiveDesc(SVCObjectiveDesc instance);
    partial void InsertSVCSupportDesc(SVCSupportDesc instance);
    partial void UpdateSVCSupportDesc(SVCSupportDesc instance);
    partial void DeleteSVCSupportDesc(SVCSupportDesc instance);
    #endregion
		
		public BenefitAdminDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["spreadsheet1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BenefitAdminDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BenefitAdminDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BenefitAdminDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BenefitAdminDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<SVCTypeDesc> SVCTypeDescs
		{
			get
			{
				return this.GetTable<SVCTypeDesc>();
			}
		}
		
		public System.Data.Linq.Table<ActivityCost> ActivityCosts
		{
			get
			{
				return this.GetTable<ActivityCost>();
			}
		}
		
		public System.Data.Linq.Table<Annotation> Annotations
		{
			get
			{
				return this.GetTable<Annotation>();
			}
		}
		
		public System.Data.Linq.Table<Condition> Conditions
		{
			get
			{
				return this.GetTable<Condition>();
			}
		}
		
		public System.Data.Linq.Table<ConditionActivity> ConditionActivities
		{
			get
			{
				return this.GetTable<ConditionActivity>();
			}
		}
		
		public System.Data.Linq.Table<ConditionService> ConditionServices
		{
			get
			{
				return this.GetTable<ConditionService>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Ministry> Ministries
		{
			get
			{
				return this.GetTable<Ministry>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<Provider> Providers
		{
			get
			{
				return this.GetTable<Provider>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceChildTypeMapping> ServiceChildTypeMappings
		{
			get
			{
				return this.GetTable<ServiceChildTypeMapping>();
			}
		}
		
		public System.Data.Linq.Table<SubActivity> SubActivities
		{
			get
			{
				return this.GetTable<SubActivity>();
			}
		}
		
		public System.Data.Linq.Table<SVCObjectiveDesc> SVCObjectiveDescs
		{
			get
			{
				return this.GetTable<SVCObjectiveDesc>();
			}
		}
		
		public System.Data.Linq.Table<SVCSupportDesc> SVCSupportDescs
		{
			get
			{
				return this.GetTable<SVCSupportDesc>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ACTCode;
		
		private string _ACTDesc;
		
		private string _SVCCode;
		
		private string _ICF_Code;
		
		private EntitySet<ConditionActivity> _ConditionActivities;
		
		private EntitySet<SubActivity> _SubActivities;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnACTDescChanging(string value);
    partial void OnACTDescChanged();
    partial void OnSVCCodeChanging(string value);
    partial void OnSVCCodeChanged();
    partial void OnICF_CodeChanging(string value);
    partial void OnICF_CodeChanged();
    #endregion
		
		public Activity()
		{
			this._ConditionActivities = new EntitySet<ConditionActivity>(new Action<ConditionActivity>(this.attach_ConditionActivities), new Action<ConditionActivity>(this.detach_ConditionActivities));
			this._SubActivities = new EntitySet<SubActivity>(new Action<SubActivity>(this.attach_SubActivities), new Action<SubActivity>(this.detach_SubActivities));
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTDesc", DbType="Char(255)")]
		public string ACTDesc
		{
			get
			{
				return this._ACTDesc;
			}
			set
			{
				if ((this._ACTDesc != value))
				{
					this.OnACTDescChanging(value);
					this.SendPropertyChanging();
					this._ACTDesc = value;
					this.SendPropertyChanged("ACTDesc");
					this.OnACTDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCode", DbType="Char(255)")]
		public string SVCCode
		{
			get
			{
				return this._SVCCode;
			}
			set
			{
				if ((this._SVCCode != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSVCCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCCode = value;
					this.SendPropertyChanged("SVCCode");
					this.OnSVCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICF_Code", DbType="Char(255)")]
		public string ICF_Code
		{
			get
			{
				return this._ICF_Code;
			}
			set
			{
				if ((this._ICF_Code != value))
				{
					this.OnICF_CodeChanging(value);
					this.SendPropertyChanging();
					this._ICF_Code = value;
					this.SendPropertyChanged("ICF_Code");
					this.OnICF_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ConditionActivity", Storage="_ConditionActivities", ThisKey="ACTCode", OtherKey="ACTCode")]
		public EntitySet<ConditionActivity> ConditionActivities
		{
			get
			{
				return this._ConditionActivities;
			}
			set
			{
				this._ConditionActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_SubActivity", Storage="_SubActivities", ThisKey="ACTCode", OtherKey="ACTCode")]
		public EntitySet<SubActivity> SubActivities
		{
			get
			{
				return this._SubActivities;
			}
			set
			{
				this._SubActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Activity", Storage="_Service", ThisKey="SVCCode", OtherKey="SVCCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._SVCCode = value.SVCCode;
					}
					else
					{
						this._SVCCode = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConditionActivities(ConditionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_ConditionActivities(ConditionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_SubActivities(SubActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_SubActivities(SubActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SVCTypeDesc")]
	public partial class SVCTypeDesc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SVCTypeCode;
		
		private string _SVCTypeDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSVCTypeCodeChanging(string value);
    partial void OnSVCTypeCodeChanged();
    partial void OnSVCTypeDescriptionChanging(string value);
    partial void OnSVCTypeDescriptionChanged();
    #endregion
		
		public SVCTypeDesc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCTypeCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SVCTypeCode
		{
			get
			{
				return this._SVCTypeCode;
			}
			set
			{
				if ((this._SVCTypeCode != value))
				{
					this.OnSVCTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCTypeCode = value;
					this.SendPropertyChanged("SVCTypeCode");
					this.OnSVCTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCTypeDescription", DbType="VarChar(255)")]
		public string SVCTypeDescription
		{
			get
			{
				return this._SVCTypeDescription;
			}
			set
			{
				if ((this._SVCTypeDescription != value))
				{
					this.OnSVCTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SVCTypeDescription = value;
					this.SendPropertyChanged("SVCTypeDescription");
					this.OnSVCTypeDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityCost")]
	public partial class ActivityCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ACTCode;
		
		private string _Unit;
		
		private string _LabourCost;
		
		private string _MaterialCost;
		
		private string _CC_Equipment;
		
		private string _CC_Building;
		
		private string _IndirectCost;
		
		private string _ProposedCost;
		
		private string _CurrentCost;
		
		private string _UnitCost;
		
		private string _ReferencedCostOrg;
		
		private System.Nullable<System.DateTime> _TimsStamp;
		
		private string _AID;
		
		private EntityRef<Annotation> _Annotation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnLabourCostChanging(string value);
    partial void OnLabourCostChanged();
    partial void OnMaterialCostChanging(string value);
    partial void OnMaterialCostChanged();
    partial void OnCC_EquipmentChanging(string value);
    partial void OnCC_EquipmentChanged();
    partial void OnCC_BuildingChanging(string value);
    partial void OnCC_BuildingChanged();
    partial void OnIndirectCostChanging(string value);
    partial void OnIndirectCostChanged();
    partial void OnProposedCostChanging(string value);
    partial void OnProposedCostChanged();
    partial void OnCurrentCostChanging(string value);
    partial void OnCurrentCostChanged();
    partial void OnUnitCostChanging(string value);
    partial void OnUnitCostChanged();
    partial void OnReferencedCostOrgChanging(string value);
    partial void OnReferencedCostOrgChanged();
    partial void OnTimsStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimsStampChanged();
    partial void OnAIDChanging(string value);
    partial void OnAIDChanged();
    #endregion
		
		public ActivityCost()
		{
			this._Annotation = default(EntityRef<Annotation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Char(255)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabourCost", DbType="Char(255)")]
		public string LabourCost
		{
			get
			{
				return this._LabourCost;
			}
			set
			{
				if ((this._LabourCost != value))
				{
					this.OnLabourCostChanging(value);
					this.SendPropertyChanging();
					this._LabourCost = value;
					this.SendPropertyChanged("LabourCost");
					this.OnLabourCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCost", DbType="Char(255)")]
		public string MaterialCost
		{
			get
			{
				return this._MaterialCost;
			}
			set
			{
				if ((this._MaterialCost != value))
				{
					this.OnMaterialCostChanging(value);
					this.SendPropertyChanging();
					this._MaterialCost = value;
					this.SendPropertyChanged("MaterialCost");
					this.OnMaterialCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC_Equipment", DbType="Char(255)")]
		public string CC_Equipment
		{
			get
			{
				return this._CC_Equipment;
			}
			set
			{
				if ((this._CC_Equipment != value))
				{
					this.OnCC_EquipmentChanging(value);
					this.SendPropertyChanging();
					this._CC_Equipment = value;
					this.SendPropertyChanged("CC_Equipment");
					this.OnCC_EquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC_Building", DbType="Char(255)")]
		public string CC_Building
		{
			get
			{
				return this._CC_Building;
			}
			set
			{
				if ((this._CC_Building != value))
				{
					this.OnCC_BuildingChanging(value);
					this.SendPropertyChanging();
					this._CC_Building = value;
					this.SendPropertyChanged("CC_Building");
					this.OnCC_BuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndirectCost", DbType="Char(255)")]
		public string IndirectCost
		{
			get
			{
				return this._IndirectCost;
			}
			set
			{
				if ((this._IndirectCost != value))
				{
					this.OnIndirectCostChanging(value);
					this.SendPropertyChanging();
					this._IndirectCost = value;
					this.SendPropertyChanged("IndirectCost");
					this.OnIndirectCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposedCost", DbType="Char(255)")]
		public string ProposedCost
		{
			get
			{
				return this._ProposedCost;
			}
			set
			{
				if ((this._ProposedCost != value))
				{
					this.OnProposedCostChanging(value);
					this.SendPropertyChanging();
					this._ProposedCost = value;
					this.SendPropertyChanged("ProposedCost");
					this.OnProposedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentCost", DbType="Char(255)")]
		public string CurrentCost
		{
			get
			{
				return this._CurrentCost;
			}
			set
			{
				if ((this._CurrentCost != value))
				{
					this.OnCurrentCostChanging(value);
					this.SendPropertyChanging();
					this._CurrentCost = value;
					this.SendPropertyChanged("CurrentCost");
					this.OnCurrentCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="Char(255)")]
		public string UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferencedCostOrg", DbType="Char(255)")]
		public string ReferencedCostOrg
		{
			get
			{
				return this._ReferencedCostOrg;
			}
			set
			{
				if ((this._ReferencedCostOrg != value))
				{
					this.OnReferencedCostOrgChanging(value);
					this.SendPropertyChanging();
					this._ReferencedCostOrg = value;
					this.SendPropertyChanged("ReferencedCostOrg");
					this.OnReferencedCostOrgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimsStamp", DbType="Date")]
		public System.Nullable<System.DateTime> TimsStamp
		{
			get
			{
				return this._TimsStamp;
			}
			set
			{
				if ((this._TimsStamp != value))
				{
					this.OnTimsStampChanging(value);
					this.SendPropertyChanging();
					this._TimsStamp = value;
					this.SendPropertyChanged("TimsStamp");
					this.OnTimsStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AID", DbType="Char(255)")]
		public string AID
		{
			get
			{
				return this._AID;
			}
			set
			{
				if ((this._AID != value))
				{
					if (this._Annotation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAIDChanging(value);
					this.SendPropertyChanging();
					this._AID = value;
					this.SendPropertyChanged("AID");
					this.OnAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Annotation_ActivityCost", Storage="_Annotation", ThisKey="AID", OtherKey="AID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Annotation Annotation
		{
			get
			{
				return this._Annotation.Entity;
			}
			set
			{
				Annotation previousValue = this._Annotation.Entity;
				if (((previousValue != value) 
							|| (this._Annotation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Annotation.Entity = null;
						previousValue.ActivityCosts.Remove(this);
					}
					this._Annotation.Entity = value;
					if ((value != null))
					{
						value.ActivityCosts.Add(this);
						this._AID = value.AID;
					}
					else
					{
						this._AID = default(string);
					}
					this.SendPropertyChanged("Annotation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Annotation")]
	public partial class Annotation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AID;
		
		private string _AText;
		
		private string _AnnotationID;
		
		private string _Reference;
		
		private EntitySet<ActivityCost> _ActivityCosts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAIDChanging(string value);
    partial void OnAIDChanged();
    partial void OnATextChanging(string value);
    partial void OnATextChanged();
    partial void OnAnnotationIDChanging(string value);
    partial void OnAnnotationIDChanged();
    partial void OnReferenceChanging(string value);
    partial void OnReferenceChanged();
    #endregion
		
		public Annotation()
		{
			this._ActivityCosts = new EntitySet<ActivityCost>(new Action<ActivityCost>(this.attach_ActivityCosts), new Action<ActivityCost>(this.detach_ActivityCosts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AID", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AID
		{
			get
			{
				return this._AID;
			}
			set
			{
				if ((this._AID != value))
				{
					this.OnAIDChanging(value);
					this.SendPropertyChanging();
					this._AID = value;
					this.SendPropertyChanged("AID");
					this.OnAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AText", DbType="Char(255)")]
		public string AText
		{
			get
			{
				return this._AText;
			}
			set
			{
				if ((this._AText != value))
				{
					this.OnATextChanging(value);
					this.SendPropertyChanging();
					this._AText = value;
					this.SendPropertyChanged("AText");
					this.OnATextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnotationID", DbType="Char(255)")]
		public string AnnotationID
		{
			get
			{
				return this._AnnotationID;
			}
			set
			{
				if ((this._AnnotationID != value))
				{
					this.OnAnnotationIDChanging(value);
					this.SendPropertyChanging();
					this._AnnotationID = value;
					this.SendPropertyChanged("AnnotationID");
					this.OnAnnotationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reference", DbType="Char(255)")]
		public string Reference
		{
			get
			{
				return this._Reference;
			}
			set
			{
				if ((this._Reference != value))
				{
					this.OnReferenceChanging(value);
					this.SendPropertyChanging();
					this._Reference = value;
					this.SendPropertyChanged("Reference");
					this.OnReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Annotation_ActivityCost", Storage="_ActivityCosts", ThisKey="AID", OtherKey="AID")]
		public EntitySet<ActivityCost> ActivityCosts
		{
			get
			{
				return this._ActivityCosts;
			}
			set
			{
				this._ActivityCosts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityCosts(ActivityCost entity)
		{
			this.SendPropertyChanging();
			entity.Annotation = this;
		}
		
		private void detach_ActivityCosts(ActivityCost entity)
		{
			this.SendPropertyChanging();
			entity.Annotation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Condition")]
	public partial class Condition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConditionCode;
		
		private string _ConditionDesc;
		
		private string _Condition1;
		
		private EntityRef<ConditionActivity> _ConditionActivity;
		
		private EntityRef<ConditionService> _ConditionService;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionCodeChanging(string value);
    partial void OnConditionCodeChanged();
    partial void OnConditionDescChanging(string value);
    partial void OnConditionDescChanged();
    partial void OnCondition1Changing(string value);
    partial void OnCondition1Changed();
    #endregion
		
		public Condition()
		{
			this._ConditionActivity = default(EntityRef<ConditionActivity>);
			this._ConditionService = default(EntityRef<ConditionService>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionCode
		{
			get
			{
				return this._ConditionCode;
			}
			set
			{
				if ((this._ConditionCode != value))
				{
					this.OnConditionCodeChanging(value);
					this.SendPropertyChanging();
					this._ConditionCode = value;
					this.SendPropertyChanged("ConditionCode");
					this.OnConditionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionDesc", DbType="Char(255)")]
		public string ConditionDesc
		{
			get
			{
				return this._ConditionDesc;
			}
			set
			{
				if ((this._ConditionDesc != value))
				{
					this.OnConditionDescChanging(value);
					this.SendPropertyChanging();
					this._ConditionDesc = value;
					this.SendPropertyChanged("ConditionDesc");
					this.OnConditionDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Condition", Storage="_Condition1", DbType="Char(255)")]
		public string Condition1
		{
			get
			{
				return this._Condition1;
			}
			set
			{
				if ((this._Condition1 != value))
				{
					this.OnCondition1Changing(value);
					this.SendPropertyChanging();
					this._Condition1 = value;
					this.SendPropertyChanged("Condition1");
					this.OnCondition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionActivity", Storage="_ConditionActivity", ThisKey="ConditionCode", OtherKey="ConditionCode", IsUnique=true, IsForeignKey=false)]
		public ConditionActivity ConditionActivity
		{
			get
			{
				return this._ConditionActivity.Entity;
			}
			set
			{
				ConditionActivity previousValue = this._ConditionActivity.Entity;
				if (((previousValue != value) 
							|| (this._ConditionActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConditionActivity.Entity = null;
						previousValue.Condition = null;
					}
					this._ConditionActivity.Entity = value;
					if ((value != null))
					{
						value.Condition = this;
					}
					this.SendPropertyChanged("ConditionActivity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionService", Storage="_ConditionService", ThisKey="ConditionCode", OtherKey="ConditionCode", IsUnique=true, IsForeignKey=false)]
		public ConditionService ConditionService
		{
			get
			{
				return this._ConditionService.Entity;
			}
			set
			{
				ConditionService previousValue = this._ConditionService.Entity;
				if (((previousValue != value) 
							|| (this._ConditionService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConditionService.Entity = null;
						previousValue.Condition = null;
					}
					this._ConditionService.Entity = value;
					if ((value != null))
					{
						value.Condition = this;
					}
					this.SendPropertyChanged("ConditionService");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConditionActivity")]
	public partial class ConditionActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConditionCode;
		
		private string _ACTCode;
		
		private EntityRef<Activity> _Activity;
		
		private EntityRef<Condition> _Condition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionCodeChanging(string value);
    partial void OnConditionCodeChanged();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    #endregion
		
		public ConditionActivity()
		{
			this._Activity = default(EntityRef<Activity>);
			this._Condition = default(EntityRef<Condition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionCode
		{
			get
			{
				return this._ConditionCode;
			}
			set
			{
				if ((this._ConditionCode != value))
				{
					if (this._Condition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConditionCodeChanging(value);
					this.SendPropertyChanging();
					this._ConditionCode = value;
					this.SendPropertyChanged("ConditionCode");
					this.OnConditionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="Char(255)")]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ConditionActivity", Storage="_Activity", ThisKey="ACTCode", OtherKey="ACTCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.ConditionActivities.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.ConditionActivities.Add(this);
						this._ACTCode = value.ACTCode;
					}
					else
					{
						this._ACTCode = default(string);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionActivity", Storage="_Condition", ThisKey="ConditionCode", OtherKey="ConditionCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Condition Condition
		{
			get
			{
				return this._Condition.Entity;
			}
			set
			{
				Condition previousValue = this._Condition.Entity;
				if (((previousValue != value) 
							|| (this._Condition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Condition.Entity = null;
						previousValue.ConditionActivity = null;
					}
					this._Condition.Entity = value;
					if ((value != null))
					{
						value.ConditionActivity = this;
						this._ConditionCode = value.ConditionCode;
					}
					else
					{
						this._ConditionCode = default(string);
					}
					this.SendPropertyChanged("Condition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConditionService")]
	public partial class ConditionService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConditionCode;
		
		private string _SVCCODE;
		
		private EntityRef<Condition> _Condition;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionCodeChanging(string value);
    partial void OnConditionCodeChanged();
    partial void OnSVCCODEChanging(string value);
    partial void OnSVCCODEChanged();
    #endregion
		
		public ConditionService()
		{
			this._Condition = default(EntityRef<Condition>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionCode
		{
			get
			{
				return this._ConditionCode;
			}
			set
			{
				if ((this._ConditionCode != value))
				{
					if (this._Condition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConditionCodeChanging(value);
					this.SendPropertyChanging();
					this._ConditionCode = value;
					this.SendPropertyChanged("ConditionCode");
					this.OnConditionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCODE", DbType="Char(255)")]
		public string SVCCODE
		{
			get
			{
				return this._SVCCODE;
			}
			set
			{
				if ((this._SVCCODE != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSVCCODEChanging(value);
					this.SendPropertyChanging();
					this._SVCCODE = value;
					this.SendPropertyChanged("SVCCODE");
					this.OnSVCCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionService", Storage="_Condition", ThisKey="ConditionCode", OtherKey="ConditionCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Condition Condition
		{
			get
			{
				return this._Condition.Entity;
			}
			set
			{
				Condition previousValue = this._Condition.Entity;
				if (((previousValue != value) 
							|| (this._Condition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Condition.Entity = null;
						previousValue.ConditionService = null;
					}
					this._Condition.Entity = value;
					if ((value != null))
					{
						value.ConditionService = this;
						this._ConditionCode = value.ConditionCode;
					}
					else
					{
						this._ConditionCode = default(string);
					}
					this.SendPropertyChanged("Condition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ConditionService", Storage="_Service", ThisKey="SVCCODE", OtherKey="SVCCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ConditionServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ConditionServices.Add(this);
						this._SVCCODE = value.SVCCode;
					}
					else
					{
						this._SVCCODE = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Material")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaterialCode;
		
		private string _MaterialDesc;
		
		private string _Unit;
		
		private string _EstimatedPrice;
		
		private string _RealPrice;
		
		private string _SVCCode;
		
		private string _Note;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnMaterialDescChanging(string value);
    partial void OnMaterialDescChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnEstimatedPriceChanging(string value);
    partial void OnEstimatedPriceChanged();
    partial void OnRealPriceChanging(string value);
    partial void OnRealPriceChanged();
    partial void OnSVCCodeChanging(string value);
    partial void OnSVCCodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Material()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialDesc", DbType="Char(255)")]
		public string MaterialDesc
		{
			get
			{
				return this._MaterialDesc;
			}
			set
			{
				if ((this._MaterialDesc != value))
				{
					this.OnMaterialDescChanging(value);
					this.SendPropertyChanging();
					this._MaterialDesc = value;
					this.SendPropertyChanged("MaterialDesc");
					this.OnMaterialDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Char(255)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedPrice", DbType="Char(255)")]
		public string EstimatedPrice
		{
			get
			{
				return this._EstimatedPrice;
			}
			set
			{
				if ((this._EstimatedPrice != value))
				{
					this.OnEstimatedPriceChanging(value);
					this.SendPropertyChanging();
					this._EstimatedPrice = value;
					this.SendPropertyChanged("EstimatedPrice");
					this.OnEstimatedPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealPrice", DbType="Char(255)")]
		public string RealPrice
		{
			get
			{
				return this._RealPrice;
			}
			set
			{
				if ((this._RealPrice != value))
				{
					this.OnRealPriceChanging(value);
					this.SendPropertyChanging();
					this._RealPrice = value;
					this.SendPropertyChanged("RealPrice");
					this.OnRealPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCode", DbType="Char(255)")]
		public string SVCCode
		{
			get
			{
				return this._SVCCode;
			}
			set
			{
				if ((this._SVCCode != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSVCCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCCode = value;
					this.SendPropertyChanged("SVCCode");
					this.OnSVCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="Char(255)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Material", Storage="_Service", ThisKey="SVCCode", OtherKey="SVCCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Materials.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Materials.Add(this);
						this._SVCCode = value.SVCCode;
					}
					else
					{
						this._SVCCode = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ministry")]
	public partial class Ministry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MinistryCode;
		
		private string _MinistryName;
		
		private EntitySet<Organization> _Organizations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMinistryCodeChanging(string value);
    partial void OnMinistryCodeChanged();
    partial void OnMinistryNameChanging(string value);
    partial void OnMinistryNameChanged();
    #endregion
		
		public Ministry()
		{
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinistryCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MinistryCode
		{
			get
			{
				return this._MinistryCode;
			}
			set
			{
				if ((this._MinistryCode != value))
				{
					this.OnMinistryCodeChanging(value);
					this.SendPropertyChanging();
					this._MinistryCode = value;
					this.SendPropertyChanged("MinistryCode");
					this.OnMinistryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinistryName", DbType="Char(255)")]
		public string MinistryName
		{
			get
			{
				return this._MinistryName;
			}
			set
			{
				if ((this._MinistryName != value))
				{
					this.OnMinistryNameChanging(value);
					this.SendPropertyChanging();
					this._MinistryName = value;
					this.SendPropertyChanged("MinistryName");
					this.OnMinistryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ministry_Organization", Storage="_Organizations", ThisKey="MinistryCode", OtherKey="MinistryCode")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Ministry = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Ministry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrgCode;
		
		private string _OrgName;
		
		private string _MinistryCode;
		
		private EntitySet<Provider> _Providers;
		
		private EntityRef<Ministry> _Ministry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgCodeChanging(string value);
    partial void OnOrgCodeChanged();
    partial void OnOrgNameChanging(string value);
    partial void OnOrgNameChanged();
    partial void OnMinistryCodeChanging(string value);
    partial void OnMinistryCodeChanged();
    #endregion
		
		public Organization()
		{
			this._Providers = new EntitySet<Provider>(new Action<Provider>(this.attach_Providers), new Action<Provider>(this.detach_Providers));
			this._Ministry = default(EntityRef<Ministry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrgCode
		{
			get
			{
				return this._OrgCode;
			}
			set
			{
				if ((this._OrgCode != value))
				{
					this.OnOrgCodeChanging(value);
					this.SendPropertyChanging();
					this._OrgCode = value;
					this.SendPropertyChanged("OrgCode");
					this.OnOrgCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgName", DbType="Char(255)")]
		public string OrgName
		{
			get
			{
				return this._OrgName;
			}
			set
			{
				if ((this._OrgName != value))
				{
					this.OnOrgNameChanging(value);
					this.SendPropertyChanging();
					this._OrgName = value;
					this.SendPropertyChanged("OrgName");
					this.OnOrgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinistryCode", DbType="Char(255)")]
		public string MinistryCode
		{
			get
			{
				return this._MinistryCode;
			}
			set
			{
				if ((this._MinistryCode != value))
				{
					if (this._Ministry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMinistryCodeChanging(value);
					this.SendPropertyChanging();
					this._MinistryCode = value;
					this.SendPropertyChanged("MinistryCode");
					this.OnMinistryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Provider", Storage="_Providers", ThisKey="OrgCode", OtherKey="OrgCode")]
		public EntitySet<Provider> Providers
		{
			get
			{
				return this._Providers;
			}
			set
			{
				this._Providers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ministry_Organization", Storage="_Ministry", ThisKey="MinistryCode", OtherKey="MinistryCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Ministry Ministry
		{
			get
			{
				return this._Ministry.Entity;
			}
			set
			{
				Ministry previousValue = this._Ministry.Entity;
				if (((previousValue != value) 
							|| (this._Ministry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ministry.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._Ministry.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._MinistryCode = value.MinistryCode;
					}
					else
					{
						this._MinistryCode = default(string);
					}
					this.SendPropertyChanged("Ministry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provider")]
	public partial class Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProviderCode;
		
		private string _ProviderName;
		
		private string _OrgCode;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderCodeChanging(string value);
    partial void OnProviderCodeChanged();
    partial void OnProviderNameChanging(string value);
    partial void OnProviderNameChanged();
    partial void OnOrgCodeChanging(string value);
    partial void OnOrgCodeChanged();
    #endregion
		
		public Provider()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderCode
		{
			get
			{
				return this._ProviderCode;
			}
			set
			{
				if ((this._ProviderCode != value))
				{
					this.OnProviderCodeChanging(value);
					this.SendPropertyChanging();
					this._ProviderCode = value;
					this.SendPropertyChanged("ProviderCode");
					this.OnProviderCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderName", DbType="Char(255)")]
		public string ProviderName
		{
			get
			{
				return this._ProviderName;
			}
			set
			{
				if ((this._ProviderName != value))
				{
					this.OnProviderNameChanging(value);
					this.SendPropertyChanging();
					this._ProviderName = value;
					this.SendPropertyChanged("ProviderName");
					this.OnProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCode", DbType="Char(255)")]
		public string OrgCode
		{
			get
			{
				return this._OrgCode;
			}
			set
			{
				if ((this._OrgCode != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgCodeChanging(value);
					this.SendPropertyChanging();
					this._OrgCode = value;
					this.SendPropertyChanged("OrgCode");
					this.OnOrgCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Provider", Storage="_Organization", ThisKey="OrgCode", OtherKey="OrgCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Providers.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Providers.Add(this);
						this._OrgCode = value.OrgCode;
					}
					else
					{
						this._OrgCode = default(string);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SVCCode;
		
		private string _SVCName;
		
		private string _SVCDesc;
		
		private string _ICF_Code;
		
		private string _HostCode;
		
		private string _StaffRole;
		
		private string _SVCType;
		
		private string _SVCObjective;
		
		private string _SVCSupport;
		
		private string _SVCCoverage;
		
		private string _SVCStart;
		
		private string _SVCEnd;
		
		private string _ChildType;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<ConditionService> _ConditionServices;
		
		private EntitySet<Material> _Materials;
		
		private EntitySet<ServiceChildTypeMapping> _ServiceChildTypeMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSVCCodeChanging(string value);
    partial void OnSVCCodeChanged();
    partial void OnSVCNameChanging(string value);
    partial void OnSVCNameChanged();
    partial void OnSVCDescChanging(string value);
    partial void OnSVCDescChanged();
    partial void OnICF_CodeChanging(string value);
    partial void OnICF_CodeChanged();
    partial void OnHostCodeChanging(string value);
    partial void OnHostCodeChanged();
    partial void OnStaffRoleChanging(string value);
    partial void OnStaffRoleChanged();
    partial void OnSVCTypeChanging(string value);
    partial void OnSVCTypeChanged();
    partial void OnSVCObjectiveChanging(string value);
    partial void OnSVCObjectiveChanged();
    partial void OnSVCSupportChanging(string value);
    partial void OnSVCSupportChanged();
    partial void OnSVCCoverageChanging(string value);
    partial void OnSVCCoverageChanged();
    partial void OnSVCStartChanging(string value);
    partial void OnSVCStartChanged();
    partial void OnSVCEndChanging(string value);
    partial void OnSVCEndChanged();
    partial void OnChildTypeChanging(string value);
    partial void OnChildTypeChanged();
    #endregion
		
		public Service()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._ConditionServices = new EntitySet<ConditionService>(new Action<ConditionService>(this.attach_ConditionServices), new Action<ConditionService>(this.detach_ConditionServices));
			this._Materials = new EntitySet<Material>(new Action<Material>(this.attach_Materials), new Action<Material>(this.detach_Materials));
			this._ServiceChildTypeMappings = new EntitySet<ServiceChildTypeMapping>(new Action<ServiceChildTypeMapping>(this.attach_ServiceChildTypeMappings), new Action<ServiceChildTypeMapping>(this.detach_ServiceChildTypeMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SVCCode
		{
			get
			{
				return this._SVCCode;
			}
			set
			{
				if ((this._SVCCode != value))
				{
					this.OnSVCCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCCode = value;
					this.SendPropertyChanged("SVCCode");
					this.OnSVCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCName", DbType="Char(255)")]
		public string SVCName
		{
			get
			{
				return this._SVCName;
			}
			set
			{
				if ((this._SVCName != value))
				{
					this.OnSVCNameChanging(value);
					this.SendPropertyChanging();
					this._SVCName = value;
					this.SendPropertyChanged("SVCName");
					this.OnSVCNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCDesc", DbType="Char(255)")]
		public string SVCDesc
		{
			get
			{
				return this._SVCDesc;
			}
			set
			{
				if ((this._SVCDesc != value))
				{
					this.OnSVCDescChanging(value);
					this.SendPropertyChanging();
					this._SVCDesc = value;
					this.SendPropertyChanged("SVCDesc");
					this.OnSVCDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICF_Code", DbType="Char(255)")]
		public string ICF_Code
		{
			get
			{
				return this._ICF_Code;
			}
			set
			{
				if ((this._ICF_Code != value))
				{
					this.OnICF_CodeChanging(value);
					this.SendPropertyChanging();
					this._ICF_Code = value;
					this.SendPropertyChanged("ICF_Code");
					this.OnICF_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostCode", DbType="Char(255)")]
		public string HostCode
		{
			get
			{
				return this._HostCode;
			}
			set
			{
				if ((this._HostCode != value))
				{
					this.OnHostCodeChanging(value);
					this.SendPropertyChanging();
					this._HostCode = value;
					this.SendPropertyChanged("HostCode");
					this.OnHostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole", DbType="Char(255)")]
		public string StaffRole
		{
			get
			{
				return this._StaffRole;
			}
			set
			{
				if ((this._StaffRole != value))
				{
					this.OnStaffRoleChanging(value);
					this.SendPropertyChanging();
					this._StaffRole = value;
					this.SendPropertyChanged("StaffRole");
					this.OnStaffRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCType", DbType="Char(255)")]
		public string SVCType
		{
			get
			{
				return this._SVCType;
			}
			set
			{
				if ((this._SVCType != value))
				{
					this.OnSVCTypeChanging(value);
					this.SendPropertyChanging();
					this._SVCType = value;
					this.SendPropertyChanged("SVCType");
					this.OnSVCTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCObjective", DbType="Char(255)")]
		public string SVCObjective
		{
			get
			{
				return this._SVCObjective;
			}
			set
			{
				if ((this._SVCObjective != value))
				{
					this.OnSVCObjectiveChanging(value);
					this.SendPropertyChanging();
					this._SVCObjective = value;
					this.SendPropertyChanged("SVCObjective");
					this.OnSVCObjectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCSupport", DbType="Char(255)")]
		public string SVCSupport
		{
			get
			{
				return this._SVCSupport;
			}
			set
			{
				if ((this._SVCSupport != value))
				{
					this.OnSVCSupportChanging(value);
					this.SendPropertyChanging();
					this._SVCSupport = value;
					this.SendPropertyChanged("SVCSupport");
					this.OnSVCSupportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCoverage", DbType="Char(255)")]
		public string SVCCoverage
		{
			get
			{
				return this._SVCCoverage;
			}
			set
			{
				if ((this._SVCCoverage != value))
				{
					this.OnSVCCoverageChanging(value);
					this.SendPropertyChanging();
					this._SVCCoverage = value;
					this.SendPropertyChanged("SVCCoverage");
					this.OnSVCCoverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCStart", DbType="Char(255)")]
		public string SVCStart
		{
			get
			{
				return this._SVCStart;
			}
			set
			{
				if ((this._SVCStart != value))
				{
					this.OnSVCStartChanging(value);
					this.SendPropertyChanging();
					this._SVCStart = value;
					this.SendPropertyChanged("SVCStart");
					this.OnSVCStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCEnd", DbType="Char(255)")]
		public string SVCEnd
		{
			get
			{
				return this._SVCEnd;
			}
			set
			{
				if ((this._SVCEnd != value))
				{
					this.OnSVCEndChanging(value);
					this.SendPropertyChanging();
					this._SVCEnd = value;
					this.SendPropertyChanged("SVCEnd");
					this.OnSVCEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildType", DbType="VarChar(14)")]
		public string ChildType
		{
			get
			{
				return this._ChildType;
			}
			set
			{
				if ((this._ChildType != value))
				{
					this.OnChildTypeChanging(value);
					this.SendPropertyChanging();
					this._ChildType = value;
					this.SendPropertyChanged("ChildType");
					this.OnChildTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Activity", Storage="_Activities", ThisKey="SVCCode", OtherKey="SVCCode")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ConditionService", Storage="_ConditionServices", ThisKey="SVCCode", OtherKey="SVCCODE")]
		public EntitySet<ConditionService> ConditionServices
		{
			get
			{
				return this._ConditionServices;
			}
			set
			{
				this._ConditionServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Material", Storage="_Materials", ThisKey="SVCCode", OtherKey="SVCCode")]
		public EntitySet<Material> Materials
		{
			get
			{
				return this._Materials;
			}
			set
			{
				this._Materials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceChildTypeMapping", Storage="_ServiceChildTypeMappings", ThisKey="SVCCode", OtherKey="SVCCode")]
		public EntitySet<ServiceChildTypeMapping> ServiceChildTypeMappings
		{
			get
			{
				return this._ServiceChildTypeMappings;
			}
			set
			{
				this._ServiceChildTypeMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ConditionServices(ConditionService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ConditionServices(ConditionService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ServiceChildTypeMappings(ServiceChildTypeMapping entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceChildTypeMappings(ServiceChildTypeMapping entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceChildTypeMapping")]
	public partial class ServiceChildTypeMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SVCCode;
		
		private string _SubWelfareID;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSVCCodeChanging(string value);
    partial void OnSVCCodeChanged();
    partial void OnSubWelfareIDChanging(string value);
    partial void OnSubWelfareIDChanged();
    #endregion
		
		public ServiceChildTypeMapping()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCode", DbType="Char(255)")]
		public string SVCCode
		{
			get
			{
				return this._SVCCode;
			}
			set
			{
				if ((this._SVCCode != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSVCCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCCode = value;
					this.SendPropertyChanged("SVCCode");
					this.OnSVCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubWelfareID", DbType="Char(255)")]
		public string SubWelfareID
		{
			get
			{
				return this._SubWelfareID;
			}
			set
			{
				if ((this._SubWelfareID != value))
				{
					this.OnSubWelfareIDChanging(value);
					this.SendPropertyChanging();
					this._SubWelfareID = value;
					this.SendPropertyChanged("SubWelfareID");
					this.OnSubWelfareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceChildTypeMapping", Storage="_Service", ThisKey="SVCCode", OtherKey="SVCCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceChildTypeMappings.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceChildTypeMappings.Add(this);
						this._SVCCode = value.SVCCode;
					}
					else
					{
						this._SVCCode = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubActivity")]
	public partial class SubActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SACTCode;
		
		private string _SACTDesc;
		
		private string _ACTCode;
		
		private string _ICF_Code;
		
		private EntityRef<Activity> _Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSACTCodeChanging(string value);
    partial void OnSACTCodeChanged();
    partial void OnSACTDescChanging(string value);
    partial void OnSACTDescChanged();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnICF_CodeChanging(string value);
    partial void OnICF_CodeChanged();
    #endregion
		
		public SubActivity()
		{
			this._Activity = default(EntityRef<Activity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SACTCode
		{
			get
			{
				return this._SACTCode;
			}
			set
			{
				if ((this._SACTCode != value))
				{
					this.OnSACTCodeChanging(value);
					this.SendPropertyChanging();
					this._SACTCode = value;
					this.SendPropertyChanged("SACTCode");
					this.OnSACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTDesc", DbType="Char(255)")]
		public string SACTDesc
		{
			get
			{
				return this._SACTDesc;
			}
			set
			{
				if ((this._SACTDesc != value))
				{
					this.OnSACTDescChanging(value);
					this.SendPropertyChanging();
					this._SACTDesc = value;
					this.SendPropertyChanged("SACTDesc");
					this.OnSACTDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="Char(255)")]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICF_Code", DbType="Char(255)")]
		public string ICF_Code
		{
			get
			{
				return this._ICF_Code;
			}
			set
			{
				if ((this._ICF_Code != value))
				{
					this.OnICF_CodeChanging(value);
					this.SendPropertyChanging();
					this._ICF_Code = value;
					this.SendPropertyChanged("ICF_Code");
					this.OnICF_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_SubActivity", Storage="_Activity", ThisKey="ACTCode", OtherKey="ACTCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.SubActivities.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.SubActivities.Add(this);
						this._ACTCode = value.ACTCode;
					}
					else
					{
						this._ACTCode = default(string);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SVCObjectiveDesc")]
	public partial class SVCObjectiveDesc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SVCObjectiveCode;
		
		private string _SVCObjectiveDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSVCObjectiveCodeChanging(string value);
    partial void OnSVCObjectiveCodeChanged();
    partial void OnSVCObjectiveDescriptionChanging(string value);
    partial void OnSVCObjectiveDescriptionChanged();
    #endregion
		
		public SVCObjectiveDesc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCObjectiveCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SVCObjectiveCode
		{
			get
			{
				return this._SVCObjectiveCode;
			}
			set
			{
				if ((this._SVCObjectiveCode != value))
				{
					this.OnSVCObjectiveCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCObjectiveCode = value;
					this.SendPropertyChanged("SVCObjectiveCode");
					this.OnSVCObjectiveCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCObjectiveDescription", DbType="VarChar(255)")]
		public string SVCObjectiveDescription
		{
			get
			{
				return this._SVCObjectiveDescription;
			}
			set
			{
				if ((this._SVCObjectiveDescription != value))
				{
					this.OnSVCObjectiveDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SVCObjectiveDescription = value;
					this.SendPropertyChanged("SVCObjectiveDescription");
					this.OnSVCObjectiveDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SVCSupportDesc")]
	public partial class SVCSupportDesc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SVCSupportCode;
		
		private string _SVCSupportDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSVCSupportCodeChanging(string value);
    partial void OnSVCSupportCodeChanged();
    partial void OnSVCSupportDescriptionChanging(string value);
    partial void OnSVCSupportDescriptionChanged();
    #endregion
		
		public SVCSupportDesc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCSupportCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SVCSupportCode
		{
			get
			{
				return this._SVCSupportCode;
			}
			set
			{
				if ((this._SVCSupportCode != value))
				{
					this.OnSVCSupportCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCSupportCode = value;
					this.SendPropertyChanged("SVCSupportCode");
					this.OnSVCSupportCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCSupportDescription", DbType="VarChar(255)")]
		public string SVCSupportDescription
		{
			get
			{
				return this._SVCSupportDescription;
			}
			set
			{
				if ((this._SVCSupportDescription != value))
				{
					this.OnSVCSupportDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SVCSupportDescription = value;
					this.SendPropertyChanged("SVCSupportDescription");
					this.OnSVCSupportDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
